import asyncio
import re

from aiogram import Dispatcher, types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import CommandStart
from aiogram.dispatcher.filters import Text
from aiogram.utils.markdown import hide_link

from bot import config
from bot.db.repository import Repo
from bot.handlers.states import UserStatus
from bot.utils.ref_generator import get_ref


async def show_about(m: types.Message):
    txt = "–í–æ–ª—à–µ–±–Ω–∞—è –õ–∞–≤–∫–∞ –ß—É–¥–µ—Å–Ω–æ–≥–æ –∏ –ù–µ–≤–µ—Ä–æ—è—Ç–Ω–æ–≥–æ\n" \
          "–≠—Ç–æ —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ –∫—É—Ä—Å–∞ –æ—Ç @Latand.\n" \
          "https://www.udemy.com/course/aiogram-python/\n\n" \
          "–ò—Å—Ö–æ–¥–Ω—ã–π –∫–æ–¥ –æ—Ç–∫—Ä—ã—Ç:\n" \
          "https://github.com/LoGoFiOS/Wizard_lavka_telegram_bot\n\n" \
          "–í —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏ –≤—ã —Å–º–æ–∂–µ—Ç–µ –Ω–∞–π—Ç–∏ –¢–ó –Ω–∞ –±–æ—Ç–∞, –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –ø–æ –∑–∞–ø—É—Å–∫—É, –∞ —Ç–∞–∫ –∂–µ –¥–æ–ø. –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, " \
          "–∫–æ—Ç–æ—Ä–∞—è –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–æ–ª–µ–∑–Ω–∞.\n" \
          "–ï—Å–ª–∏ –µ—Å—Ç—å –∑–∞–º–µ—á–∞–Ω–∏—è/–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è ‚Äî –ø–∏—à–∏—Ç–µ @LoGoFiOS"
    await m.answer(txt)


async def set_state(m: types.Message, state: FSMContext):
    """
    –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–µ—Ä–µ–π—Ç–∏ –≤ —Å—Ç–∞—Ç—É—Å –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞. –ù–∞ –≤—Å–∫—è–∏–π —Å–ª—É—á–∞–π.
    """
    await m.answer("State = waiting_code")
    await UserStatus.waiting_code.set()
    await state.update_data({'cart': {}, 'cart_msg_id': None})


async def show_shop(m: types.Message):
    """
    –í—ã–¥–∞—ë—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ, –≤ –∫–æ—Ç–æ—Ä–æ–º –∫–Ω–æ–ø–∫–∞, –æ—Ç–∫—Ä—ã–≤–∞—é—â–∞—è –∫–∞—Ç–∞–ª–æ–≥.
    –°–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–µ—Ç—Å—è —á–µ—Ä–µ–∑ 3 —Å–µ–∫.
    """
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(types.InlineKeyboardButton(text='–ö–∞—Ç–∞–ª–æ–≥', switch_inline_query_current_chat=""))
    msg = await m.answer("–ù–∞–∂–º–∏, —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å:", reply_markup=keyboard)
    await asyncio.sleep(3.0)
    await msg.delete()


async def user_info(m: types.Message, repo: Repo):
    """
    –í—ã–¥–∞—ë—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø—Ä–æ—Ñ–∏–ª–µ –ø–æ–ª—å–∑–æ–≤—Ç–µ–ª—è.
    """
    row = await repo.get_user(id=m.from_user.id)
    await m.answer(f"–ö–æ—à–µ–ª—å: {row['balance']} üíé\n"
                   f"–ö—Å—Ç–∞—Ç–∏, –∑–∞ –∫–∞–∂–¥–æ–≥–æ –Ω–æ–≤–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –∫–æ—à–µ–ª—ë–∫ –ø–æ—Ç—è–∂–µ–ª–µ–µ—Ç –Ω–∞ 10 üíé!")
    txt = f"–ü–∞—Ä–æ–ª—å –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –Ω–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {row['ref_code']}\n" \
          f"–ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞: \n" \
          f"https://t.me/WizardLavka_bot?start=ref_{row['ref_code']}"
    await m.answer(txt)


async def secret_code(m: types.Message):
    """
    –ü—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ (state == UserStatus.waiting_code) –º–æ–∂–Ω–æ –Ω–∞–ø–∏—Å—Ç–∞—å –≤ —á–∞—Ç "–ø–æ–∂–∞–ª—É–π—Å—Ç–∞" –∏ –±—É–¥–µ—Ç –≤—ã–¥–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
    —Å –ø–∞—Ä–æ–ª–µ–º. –ï—Å–ª–∏ –∑–∞—Ç–µ–º –Ω–∞–ø–∏—Å–∞—Ç—å —ç—Ç–æ—Ç –ø–∞—Ä–æ–ª—å, —Ç.–µ. 'MrKakurasu', –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—É–¥–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω.
    –≠—Ç–æ—Ç –ø–∞—Ä–æ–ª—å —Å–æ–∑–¥–∞—ë—Ç—Å—è –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î (—Å–º. bot.py).
    """
    await m.answer("–°–µ–∫—Ä–µ—Ç–Ω—ã–π –ø–∞—Ä–æ–ª—å —Ö–æ–∑—è–∏–Ω–∞ –ª–∞–≤–∫–∏: MrKakurasu")


async def start_item_id(m: types.Message, repo: Repo):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "—Ö–æ—á—É –∫—É–ø–∏—Ç—å", –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∞ –∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É –≤—ã–¥–∞—á–∏ inline –∑–∞–ø—Ä–æ—Å–∞.
    –ü—Ä–æ –∫–Ω–æ–ø–∫—É —Å–º. get_inline_answer_keyboard() –≤ inline_mode.py

    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–æ–≤–∞—Ä. –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω, —Ç–æ state = waiting_code
    """
    item_id = m.get_args()[5::]
    item = await repo.get_item(int(item_id))
    # –û—Å—Ç–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ —Å–ª—É—á–∞–π –º–∞—Ö–∏–Ω–∞—Ü–∏–π —Å –¥–∏–ø–ª–∏–Ω–∫–∞–º–∏
    if not item:
        return
    await m.answer(await item_msg(item), parse_mode=types.ParseMode.HTML,
                   reply_markup=await get_item_keyboard(int(item_id), m.from_user.id))

    # –û—Å—Ç–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ —Å–ª—É—á–∞–π –º–∞—Ö–∏–Ω–∞—Ü–∏–π —Å –¥–∏–ø–ª–∏–Ω–∫–∞–º–∏
    if await is_user_exist(m, repo):
        # await m.answer(f"–ü–æ—Å—Ç–æ–π—Ç–µ-–∫–∞. –î–∞ –≤–µ–¥—å –≤—ã <i>—É–∂–µ</i> –Ω–∞—à –ø–æ–∫—É–ø–∞—Ç–µ–ª—å!")
        return
    await UserStatus.waiting_code.set()
    await m.answer(await hi_msg())


async def start_ref_link(m: types.Message, repo: Repo, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ –≤–∏–¥–∞: https://t.me/WizardLavka_bot?start=ref_REFCODE

    –ò–∑ —Å—Å—ã–ª–∫–∏ –¥–æ—Å—Ç–∞—ë—Ç—Å—è –≤—à–∏—Ç—ã–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥ ref –∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è –Ω–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å.
    """
    if await is_user_exist(m, repo):
        await m.answer(f"–ü–æ—Å—Ç–æ–π—Ç–µ-–∫–∞. –î–∞ –≤–µ–¥—å –≤—ã <i>—É–∂–µ</i> –Ω–∞—à –ø–æ–∫—É–ø–∞—Ç–µ–ª—å!")
        return
    ref = m.get_args()[4::]
    await m.answer(f"–í—ã –ø—Ä–∏—à–ª–∏ –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ —Å –ø–∞—Ä–æ–ª–µ–º: {ref}")
    if await is_code_valid(m, repo, ref):
        await add_user(m, ref, repo, state)
    else:
        await UserStatus.waiting_code.set()


async def reading_code(m: types.Message, repo: Repo, state: FSMContext):
    """
    –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (state == waiting_code) - —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥. –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –µ–≥–æ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å.
    """
    if await is_code_valid(m, repo, m.text):
        await add_user(m, m.text, repo, state)


async def start_base(m: types.Message, repo: Repo):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ /start.

    –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—Å—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ waiting_code, —Ç.–µ. –æ–Ω –¥–æ–ª–∂–µ–Ω –ª–∏–±–æ –≤–≤–µ—Å—Ç–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥ —Å–∞–º,
    –ª–∏–±–æ –ø—Ä–æ–π—Ç–∏ –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ.
    """
    if await is_user_exist(m, repo):
        await m.answer(f"–ü–æ—Å—Ç–æ–π—Ç–µ-–∫–∞. –î–∞ –≤–µ–¥—å –≤—ã <i>—É–∂–µ</i> –Ω–∞—à –ø–æ–∫—É–ø–∞—Ç–µ–ª—å!")
        return
    await UserStatus.waiting_code.set()
    await m.answer(await hi_msg())


def register_user(dp: Dispatcher):
    dp.register_message_handler(show_about, commands=["about"], state="*")
    dp.register_message_handler(set_state, commands=["set"], state="*")
    dp.register_message_handler(show_shop, commands=["shop"], state="*")
    dp.register_message_handler(user_info, commands=["me"], state=UserStatus.access_true)
    dp.register_message_handler(secret_code, Text(equals="–ø–æ–∂–∞–ª—É–π—Å—Ç–∞", ignore_case=True),
                                state=UserStatus.waiting_code)
    dp.register_message_handler(start_item_id, CommandStart(deep_link=re.compile(r"item_([\w]+)")), state="*")
    dp.register_message_handler(start_ref_link, CommandStart(deep_link=re.compile(r"ref_([\w]+)")), state="*")
    dp.register_message_handler(reading_code, state=UserStatus.waiting_code)
    dp.register_message_handler(start_base, commands=["start"], state="*")


async def is_user_exist(m: types.Message, repo: Repo):
    """
    –°—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ë–î Postgres.
    """
    row = await repo.get_user(id=m.from_user.id)
    return row is not None


async def is_code_valid(m: types.Message, repo: Repo, ref: str):
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞. –¢.–µ. –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ —Ç–∞–∫–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, —É –∫–æ—Ç–æ—Ä–æ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥ == ref

    ref - —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥ –∫–æ—Ç–æ—Ä—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤—ë–ª —Å–∞–º –∏–ª–∏ –∫–æ—Ç–æ—Ä—ã–π –±—ã–ª –≤—à–∏—Ç –≤ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É.
    """
    await m.answer("–õ–∏—Å—Ç–∞–µ–º –∫–Ω–∏–≥—É —Ç–∞–π–Ω... –°–≤–µ—Ä—è–µ–º –∑–∞–ø–∏—Å–∏...")
    row = await repo.check_ref(ref)
    if row is None:
        await m.answer(
            f"–ü–∞—Ä–æ–ª—å {ref} –Ω–µ–≤–µ—Ä–µ–Ω! "
            f"–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –µ—â—ë —Ä–∞–∑ –∏–ª–∏ –ø–æ–ø—Ä–æ—Å–∏—Ç–µ —Å—Å—ã–ª–∫—É-–ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ —É –ª—é–±–æ–≥–æ –¥–µ–π—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è!")
        return False
    return True


async def add_user(m: types.Message, ref: str, repo: Repo, state: FSMContext):
    """
    –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î Postgres.

    ref - —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥ –∫–æ—Ç–æ—Ä—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤—ë–ª —Å–∞–º –∏–ª–∏ –∫–æ—Ç–æ—Ä—ã–π –±—ã–ª –≤—à–∏—Ç –≤ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É –ø–æ –∫–æ—Ç–æ—Ä–æ–π –æ–Ω –ø—Ä–æ—à—ë–ª.

    –ö–∞–∂–¥—ã–π –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–º–µ–µ—Ç —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–µ—Ç –±—ã—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–∞—Ä–æ–ª—è —Å–º. bot/utils/ref_generator.py

    –¢–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, —É –∫–æ—Ç–æ—Ä–æ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥ == ref, –Ω–∞—á–∏–ª—è—é—Ç—Å—è –º–æ–Ω–µ—Ç—ã –Ω–∞ —Å—á—ë—Ç.
    """
    id_who_invited = await repo.get_user(ref_code=ref)
    await repo.add_user(m.from_user.id, get_ref(m.from_user.id), id_who_invited["id"])
    await repo.add_coins_ref(id_who_invited=id_who_invited["id"])
    await state.update_data({'cart': {}, 'cart_msg_id': None})
    await m.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –í–æ–ª—à–µ–±–Ω—É—é –õ–∞–≤–∫—É –ß—É–¥–µ—Å–Ω–æ–≥–æ –∏ –ù–µ–≤–µ—Ä–æ—è—Ç–Ω–æ–≥–æ!")
    await UserStatus.access_true.set()


async def hi_msg():
    return "\n\n".join(
        [
            "–î–æ–±—Ä–æ–≥–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –õ–∞–≤–∫—É –ß—É–¥–µ—Å–Ω–æ–≥–æ –∏ –ù–µ–≤–µ—Ä–æ—è—Ç–Ω–æ–≥–æ - –∑–¥–µ—Å—å –º–æ–∂–Ω–æ –Ω–∞–π—Ç–∏ —Å–∞–º—ã–µ —É–¥–∏–≤–∏—Ç–µ–ª—å–Ω—ã–µ –≤–µ—â–∏ "
            "—Å–æ –≤—Å–µ–≥–æ —Å–≤–µ—Ç–∞.",
            "–í—Ö–æ–¥ –Ω–µ –¥–ª—è –≤—Å–µ—Ö, –≤—ã –∂–µ –ø–æ–Ω–∏–º–∞–µ—Ç–µ...",
            "–ù–∞–∑–æ–≤–∏—Ç–µ —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –ø–∞—Ä–æ–ª—å, –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–Ω–æ —Å–ø—Ä–æ—Å–∏—Ç—å —É –ª—é–±–æ–≥–æ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è.",
            "–í–ø—Ä–æ—á–µ–º, –µ—Å–ª–∏ –≤—ã —Å–∫–∞–∂–∏—Ç–µ –º–Ω–µ <b>–≤–æ–ª—à–µ–±–Ω–æ–µ —Å–ª–æ–≤–æ</b>, —Ç–æ —Ç–∞–∫ –∏ –±—ã—Ç—å - —è –ø–æ–¥–µ–ª—é—Å—å —Å–≤–æ–∏–º.",
        ])


async def item_msg(item) -> str:
    """
    –§–æ—Ä–º–∞—Ç –≤—ã–≤–æ–¥–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ–≤–∞—Ä–µ.
    """
    return f"<b>{item['name']}</b>\n\n" \
           f"{item['description']}\n\n" \
           f"–¶–µ–Ω–∞: {item['price']} üíé\n" \
           f"{hide_link(item['img_link'])}"


async def get_item_keyboard(item_id: int, user_id: int):
    """
    –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞, –∫–æ—Ç–æ—Ä–∞—è –∫—Ä–µ–ø–∏—Ç—Å—è –∫ —Å–æ–æ–±—â–µ–Ω–∏—é —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ç–æ–≤–∞—Ä–µ.
    """
    if user_id in config.admins:
        return types.InlineKeyboardMarkup(inline_keyboard=[
            [
                types.InlineKeyboardButton('–í –∫–æ—Ä–∑–∏–Ω—É!', callback_data=f'add_item_{item_id}')
            ],
            # TODO: —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ –ë–î –ø—Ä–µ–¥–º–µ—Ç–∞ —ç—Ç–æ–π –∫–Ω–æ–ø–∫–æ–π
            [
                types.InlineKeyboardButton('–ò–∑—ä—è—Ç—å –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞!', callback_data=f'del_item_{item_id}')
            ],
        ])
    else:
        return types.InlineKeyboardMarkup(inline_keyboard=[
            [
                types.InlineKeyboardButton('–í –∫–æ—Ä–∑–∏–Ω—É!', callback_data=f'add_item_{item_id}')
            ],
        ])

# dp.register_message_handler(adm_unset, commands=["unset"], state="*")
# dp.register_message_handler(adm_clear, commands=["clear"], state="*")
# dp.register_message_handler(adm_coins, commands=["coins"], state="*")
# dp.register_callback_query_handler(show_item, Text(startswith="item_"), state="*")

# async def show_item(call: types.CallbackQuery, repo: Repo):
#     item_id = call.data.split("_")[1]
#     item = await repo.get_item(int(item_id))
#     await call.bot.send_message(call.from_user.id, await item_msg(item), parse_mode=types.ParseMode.HTML,
#                                 reply_markup=await get_item_keyboard(int(item_id), call.from_user.id))
#     await call.answer()


# async def adm_set(m: types.Message, repo: Repo, state: FSMContext):
#     await m.answer("State = accessTrue")
#     await UserStatus.access_true.set()
#     await state.update_data({'cart': {}, 'cart_msg_id': None})
#
#
# async def adm_unset(m: types.Message, repo: Repo, state: FSMContext):
#     await m.answer("State.finish()")
#     await state.finish()


# async def adm_clear(m: types.Message, repo: Repo, state: FSMContext):
#     await m.answer("State reset")
#     await state.finish()
#     await state.update_data({'cart': {}, 'cart_msg_id': None})
#     await UserStatus.access_true.set()
#
#
# async def adm_coins(m: types.Message, repo: Repo, state: FSMContext):
#     await m.answer("add coins")
#     await repo.change_balance(m.from_user.id, 10)


# async def adm_del(m: types.Message, repo: Repo, state: FSMContext):
#     await m.answer("del user")
#     await UserStatus.access_true.set()
